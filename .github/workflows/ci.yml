name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports: [5432:5432]
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      # --- Python setup & caching ---
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: pip install -r requirements.txt

      # --- Backend tests with coverage (export XML for SonarCloud) ---
      - name: Run backend tests with coverage
        run: |
          pip install pytest-cov
          pytest --cov=app --cov-report=xml

      - name: Notify Telegram - backend tests completed
        run: |
          python generate_ps1.py
          pwsh -File SendMessage.ps1
        shell: pwsh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_MESSAGE: "✅ Backend tests completed successfully."

      # 🔒 Python security scan
      - name: Run Bandit (Python security scan)
        run: pip install bandit && bandit -r . -ll

      # --- Node.js setup & caching ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        working-directory: task-manager-frontend
        run: npm ci

      # --- Frontend tests with coverage (export LCOV for SonarCloud) ---
      - name: Run frontend tests with coverage
        working-directory: task-manager-frontend
        run: |
          npm test -- --coverage --coverageReporters=lcov
          ls coverage/
          
      - name: Notify Telegram - frontend tests completed
        run: |
          python generate_ps1.py
          pwsh -File SendMessage.ps1
        shell: pwsh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_MESSAGE: "✅ Frontend tests completed successfully."

      # 🔒 Node.js dependency security scan
      - name: Run npm audit
        working-directory: task-manager-frontend
        run: npm audit --audit-level=critical

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            task-manager-frontend/coverage/lcov.info

      # On failure (optional)
      - name: Notify Telegram - CI failed
        if: failure()
        run: |
          python generate_ps1.py
          pwsh -File SendMessage.ps1
        shell: pwsh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_MESSAGE: "❌ CI pipeline failed!"

  # --- SonarCloud analysis job ---
  sonarcloud:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17 (required for SonarScanner)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage-reports

      - name: Debug coverage files
        run: |
          ls ./coverage-reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=coverage-reports/task-manager-frontend/coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}